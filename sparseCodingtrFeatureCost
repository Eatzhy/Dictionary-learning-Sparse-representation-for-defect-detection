function [cost, grad] = sparseCodingtrFeatureCost(D_Matrix, tr_featureMatrix, visibleSize, numFeatures, patches, gamma, lambda, epsilon, groupMatrix)
%   特征的损失函数，a
%   参数
%   D_Matrix  - 字典. D_Matrix(:, c) is the cth 字典向量

%   tr_featureMatrix - tr_featureMatrix(:, c) is the features
%                   for the cth example
%   visibleSize   - number of pixels in the patches
%   numFeatures   - number of features
%   patches       - patches
%   gamma         - weight decay parameter (on weightMatrix)
%   lambda        - L1 sparsity weight (on featureMatrix)
%   epsilon       - L1 sparsity epsilon
%   groupMatrix   - the grouping matrix. groupMatrix(r, :) indicates the
%                   features included in the rth group. groupMatrix(r, c)
%                   is 1 if the cth feature is in the rth group and 0
%                   otherwise.

    if exist('groupMatrix', 'var')
        assert(size(groupMatrix, 2) == numFeatures, 'groupMatrix has bad dimension');
    else
        groupMatrix = eye(numFeatures);
    end

    numExamples = size(patches, 2);

    D_Matrix = reshape(D_Matrix, visibleSize, numFeatures);
    tr_featureMatrix = reshape(tr_featureMatrix, numFeatures, numExamples);

   
    
%% 求目标的代价函数
    delta = D_Matrix*tr_featureMatrix-patches;
    fResidue = sum(sum(delta.^2))./numExamples;%重构误差
    fWeight = gamma*sum(D_Matrix(:).^2);%防止基内元素值过大
    sparsityMatrix = sqrt(groupMatrix*(tr_featureMatrix.^2)+epsilon);
    fSparsity = lambda*sum(sparsityMatrix(:)); %对特征系数性的惩罚值
    cost = fResidue++fSparsity+fWeight;%此时A为常量，可以不用
    %     cost = fResidue++fSparsity;

    %% 求目标代价函数的偏导函数
    gradResidue = (-2*D_Matrix'*patches+2*(D_Matrix')*D_Matrix*tr_featureMatrix)./numExamples;
  
    % 非拓扑结构时：
    isTopo = 1;  %isTopo = 1时，表示为拓扑结构
    if ~isTopo
        gradSparsity = lambda*(tr_featureMatrix./sparsityMatrix);
        
    % 拓扑结构时
    else
        gradSparsity = lambda*groupMatrix'*(groupMatrix*(tr_featureMatrix.^2)+epsilon).^(-0.5).*tr_featureMatrix;%一定要小心最后一项是内积乘法
    end
    grad = gradResidue+gradSparsity;
    grad = grad(:);
      
end
